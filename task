1 написать декоратор делающий поддержку каррирования у функции
в простейшейм случае
@curry
def f(a,b,c):
   pass # or something

после этого получается
f(a)(b)(c) == f(a,b)(c)  == f(a,b,c)
по возможности добавить поддержку произвольного типа параметров (default vals, *args, **kw)

3 написать объект xrange являющийся sequence, iterable, sliceable и все прочие "стандартные" питонячие протоколы которые вы сможете.

4 придумать какой смысл может быть в ireduce (как izip и imap из itertools) и реализовать его

5 используя функциональные элементы python написать решето эратосфена
(в идеале пользоваться lambda, comprehensions, map reduce filter, itertools - т.е чтобы вся функция eratosthenes была expression)

6 придумать как дать пользователю возможность делать свои операторы в инфиксной форме
http://www.haskell.org/haskellwiki/Infix_operator

7 топологическая сортировка функций
http://blog.getprismatic.com/blog/2012/10/1/prismatics-graph-at-strange-loop.html
сделать декоратор (или несколько) позволяющих делать то что описано в статье.